"""init

Revision ID: 0db06caf6570
Revises: 
Create Date: 2025-04-06 18:31:28.726126

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0db06caf6570'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usergenre')
    op.drop_table('exchangerequest')
    op.drop_table('genre')
    op.drop_table('book')
    op.drop_table('user')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('book',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('book_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('available', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], name='book_genre_id_fkey'),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='book_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='book_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('genre',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('genre_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='genre_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('exchangerequest',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_book_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receiver_book_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'rejected', name='exchangestatus'), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['receiver_book_id'], ['book.id'], name='exchangerequest_receiver_book_id_fkey'),
    sa.ForeignKeyConstraint(['receiver_id'], ['user.id'], name='exchangerequest_receiver_id_fkey'),
    sa.ForeignKeyConstraint(['sender_book_id'], ['book.id'], name='exchangerequest_sender_book_id_fkey'),
    sa.ForeignKeyConstraint(['sender_id'], ['user.id'], name='exchangerequest_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exchangerequest_pkey')
    )
    op.create_table('usergenre',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('genre_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('preference_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], name='usergenre_genre_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='usergenre_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'genre_id', name='usergenre_pkey')
    )
    # ### end Alembic commands ###
